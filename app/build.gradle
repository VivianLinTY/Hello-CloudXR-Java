apply plugin: 'com.android.application'

def setVersionName = { ->
    if (project.hasProperty("androidVersionName")) {
        println("Replacing versionName with supplied build parameter: " +
                "$androidVersionName")
        return androidVersionName
    } else {
        return "1.0"
    }
}

android {
    buildToolsVersion '28.0.3'
    ndkVersion '21.4.7075529' // current LTS atm

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.google.ar.core.examples.java.helloar"

        // AR Optional apps must declare minSdkVersion >= 14.
        // AR Required apps must declare minSdkVersion >= 24.
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 1
        versionName setVersionName()

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++1y", "-Wall"
                arguments "-DANDROID_STL=c++_shared",
                        "-DANDROID_ABI=arm64-v8a",
                        "-DGLM_INCLUDE=${project.rootDir}/libs/glm",
                        "-DOBOE_LIBPATH=${project.rootDir}/libs/Oboe/jni",
                        "-DOBOE_INCLUDE=${project.rootDir}/libs/Oboe/include",
                        "-DCLOUDXR_LIBPATH=${project.rootDir}/libs/CloudXR/jni",
                        "-DCLOUDXR_INCLUDE=${project.rootDir}/libs/CloudXR/include",
                        "-DC_SHARED_INCLUDE=${project.rootDir}/../../../../shared"
            }
        }
        ndk {
            abiFilters 'arm64-v8a'
        }
        sourceSets {
            main {
                jniLibs.srcDirs = ["${project.rootDir}/libs/Oboe/jni"]
            }
        }
    }
    signingConfigs {
        release {
            storeFile file('./dummy.jks')
            storePassword 'nvidia'
            keyAlias 'nvidia'
            keyPassword 'nvidia'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

repositories {
    flatDir {
        dirs "${project.rootDir}/libs"
    }
}

dependencies {
    // ARCore library
    // Dependency version is rewritten at build time.
    implementation 'com.google.ar:core:1.16.0'

    // Obj - a simple Wavefront OBJ file loader
    // https://github.com/javagl/Obj
    implementation 'de.javagl:obj:0.2.1'

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.nvidia.CloudXRClient:CloudXR@aar'
}

preBuild.dependsOn(':extractOboe')
preBuild.dependsOn(':extractCloudXR')
